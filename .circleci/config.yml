version: 2

aliases:
  - &docker
    - image: circleci/openjdk:8-jdk-node-browsers

  - &environment
    TZ: /usr/share/zoneinfo/America/Los_Angeles

  - &restore_yarn_cache
    restore_cache:
      name: Restore node_modules cache
      keys:
        - v2-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - v2-node-{{ arch }}-{{ .Branch }}-
        - v2-node-{{ arch }}-
  - &run_yarn
    run:
      name: Install Packages
      command: yarn --frozen-lockfile

jobs:
  setup:
    docker: *docker
    environment: *environment

    steps:
      - checkout
      - run:
          name: Nodejs Version
          command: node --version
      - *restore_yarn_cache
      - run:
          name: Link yarn packages
          command: yarn link
      - *run_yarn
      - save_cache:
          name: Save node_modules cache
          key: v2-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  lint:
    docker: *docker
    environment: *environment

    steps:
      - checkout
      - *restore_yarn_cache
      - *run_yarn
      - run:
          command: yarn prettier-all
      - run:
          command: yarn lint:eslint:fix

  test:
    docker: *docker
    environment: *environment
    steps:
      - checkout
      - *restore_yarn_cache
      - *run_yarn
      - run:
          name: "Run Jest and Collect Coverage Reports"
          command: yarn test --maxWorkers=2 --collectCoverage=true
      - store_artifacts:
          path: .jest-coverage/coverage-final.json

  build:
    docker: *docker
    environment: *environment
    parallelism: 4
    steps:
      - checkout
      - *restore_yarn_cache
      - *run_yarn
      - run:
          command: yarn build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/node_modules
            - project/packages/helpers/dist
            - project/packages/helpers/node_modules
            - project/packages/hooks/dist
            - project/packages/hooks/node_modules
            - project/packages/icons/dist
            - project/packages/icons/node_modules
            - project/packages/ui/dist
            - project/packages/ui/node_modules
  deploy:
    docker: *docker
    environment: *environment
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build:
    jobs:
      - setup
      - build:
          requires:
            - setup
  lint:
    jobs:
      - setup
      - lint:
          requires:
            - setup
  test:
    jobs:
      - setup
      - test:
          requires:
            - setup

  build-deploy:
    jobs:
      - build
      - deploy:
          context: globals
          requires:
            - build # only run deploy-via-git job if the build job has completed
          filters:
            branches:
              only: master # only run deploy-via-git job on master branch
