{"expireTime":9007200835905916000,"key":"gatsby-plugin-mdx-entire-payload-1c162ac7a8dac81567fb35f58b078f2d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/Users/Roach/Desktop/frontend-toolbox/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":118,"offset":119},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":121},"end":{"line":5,"column":29,"offset":149},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"useDidUpdateEffect","position":{"start":{"line":7,"column":3,"offset":153},"end":{"line":7,"column":21,"offset":171},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":151},"end":{"line":7,"column":21,"offset":171},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"ðŸ§µ do not worry about render phase effect calls","position":{"start":{"line":8,"column":3,"offset":175},"end":{"line":8,"column":50,"offset":222},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":175},"end":{"line":9,"column":5,"offset":228},"indent":[1]}}],"position":{"start":{"line":8,"column":1,"offset":173},"end":{"line":9,"column":5,"offset":228},"indent":[1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.npmjs.com/package/@snappmarket/use-did-update-effect","children":[{"type":"image","title":null,"url":"https://img.shields.io/npm/v/@snappmarket/use-did-update-effect.svg?style=flat-square","alt":"version","position":{"start":{"line":11,"column":2,"offset":233},"end":{"line":11,"column":99,"offset":330},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":232},"end":{"line":11,"column":166,"offset":397},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":11,"column":166,"offset":397},"end":{"line":12,"column":1,"offset":399},"indent":[1]}},{"type":"link","title":null,"url":"http://www.npmtrends.com/@snappmarket/use-did-update-effect","children":[{"type":"image","title":null,"url":"https://img.shields.io/npm/dm/@snappmarket/use-did-update-effect.svg?style=flat-square","alt":"downloads","position":{"start":{"line":12,"column":2,"offset":400},"end":{"line":12,"column":102,"offset":500},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":399},"end":{"line":12,"column":164,"offset":562},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":12,"column":164,"offset":562},"end":{"line":13,"column":1,"offset":564},"indent":[1]}},{"type":"link","title":null,"url":"http://makeapullrequest.com","children":[{"type":"image","title":null,"url":"https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square","alt":"PRs Welcome","position":{"start":{"line":13,"column":2,"offset":565},"end":{"line":13,"column":92,"offset":655},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":564},"end":{"line":13,"column":122,"offset":685},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":122,"offset":685},"end":{"line":14,"column":1,"offset":687},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/snappmarket/frontend-toolbox/tree/master/packages/useDidUpdateEffect/blob/master/LICENSE.md","children":[{"type":"image","title":null,"url":"https://img.shields.io/npm/l/@snappmarket/use-did-update-effect.svg?style=flat-square","alt":"MIT License","position":{"start":{"line":14,"column":2,"offset":688},"end":{"line":14,"column":103,"offset":789},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":687},"end":{"line":14,"column":216,"offset":902},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":232},"end":{"line":14,"column":216,"offset":902},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/snappmarket/frontend-toolbox/watchers","children":[{"type":"image","title":null,"url":"https://img.shields.io/github/watchers/snappmarket/frontend-toolbox.svg?style=social","alt":"Watch on GitHub","position":{"start":{"line":16,"column":2,"offset":907},"end":{"line":16,"column":106,"offset":1011},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":906},"end":{"line":16,"column":165,"offset":1070},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":16,"column":165,"offset":1070},"end":{"line":17,"column":1,"offset":1072},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/snappmarket/frontend-toolbox/stargazers","children":[{"type":"image","title":null,"url":"https://img.shields.io/github/stars/snappmarket/frontend-toolbox.svg?style=social","alt":"Star on GitHub","position":{"start":{"line":17,"column":2,"offset":1073},"end":{"line":17,"column":102,"offset":1173},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1072},"end":{"line":17,"column":163,"offset":1234},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":906},"end":{"line":17,"column":163,"offset":1234},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"get started","position":{"start":{"line":19,"column":4,"offset":1241},"end":{"line":19,"column":15,"offset":1252},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1238},"end":{"line":19,"column":16,"offset":1253},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We provide two way of using this package ","position":{"start":{"line":20,"column":1,"offset":1255},"end":{"line":20,"column":42,"offset":1296},"indent":[]}},{"type":"inlineCode","value":"single","position":{"start":{"line":20,"column":42,"offset":1296},"end":{"line":20,"column":50,"offset":1304},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":20,"column":50,"offset":1304},"end":{"line":20,"column":54,"offset":1308},"indent":[]}},{"type":"inlineCode","value":"multi","position":{"start":{"line":20,"column":54,"offset":1308},"end":{"line":20,"column":61,"offset":1315},"indent":[]}},{"type":"text","value":" :","position":{"start":{"line":20,"column":61,"offset":1315},"end":{"line":20,"column":63,"offset":1317},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1255},"end":{"line":20,"column":63,"offset":1317},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"npm i @snappmarket/use-did-update-effect\nOR\nnpm i @snappmarket/hooks","position":{"start":{"line":21,"column":1,"offset":1319},"end":{"line":25,"column":4,"offset":1403},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"usage","position":{"start":{"line":27,"column":4,"offset":1410},"end":{"line":27,"column":9,"offset":1415},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1407},"end":{"line":27,"column":10,"offset":1416},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import useDidUpdateEffect from '@snappmarket/use-did-update-effect';\n// or \n// import { useDidUpdateEffect } from '@snappmarket/hooks';\n\n\nconst MyComponenet = props => {\n  /**\n   * Do not run on render\n   */\n  useDidUpdateEffect(() => {\n    // I will run only when my dependencies update\n  }, [deps]);\n};","position":{"start":{"line":28,"column":1,"offset":1418},"end":{"line":42,"column":4,"offset":1754},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"source code","position":{"start":{"line":45,"column":5,"offset":1764},"end":{"line":45,"column":16,"offset":1775},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1760},"end":{"line":45,"column":16,"offset":1775},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import { useRef, useEffect } from 'react';\n\n/**\n * Calls function on component update or inputs change phase\n * @param fn\n * @param inputs\n */\nexport default (fn, inputs) => {\n  const didMountRef = useRef(false);\n\n  useEffect(() => {\n    if (didMountRef.current) fn();\n    else didMountRef.current = true;\n  }, inputs);\n};","position":{"start":{"line":46,"column":1,"offset":1777},"end":{"line":62,"column":4,"offset":2133},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":65,"column":1,"offset":2137},"end":{"line":65,"column":31,"offset":2167},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":65,"column":31,"offset":2167}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Roach/Desktop/frontend-toolbox/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usedidupdateeffect\"\n    }}>{`useDidUpdateEffect`}</h1>\n    <blockquote>\n      <h2 parentName=\"blockquote\" {...{\n        \"id\": \"ðŸ§µ-do-not-worry-about-render-phase-effect-calls\"\n      }}>{`ðŸ§µ do not worry about render phase effect calls`}</h2>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@snappmarket/use-did-update-effect\"\n      }}><img alt=\"version\" src=\"https://img.shields.io/npm/v/@snappmarket/use-did-update-effect.svg?style=flat-square\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://www.npmtrends.com/@snappmarket/use-did-update-effect\"\n      }}><img alt=\"downloads\" src=\"https://img.shields.io/npm/dm/@snappmarket/use-did-update-effect.svg?style=flat-square\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://makeapullrequest.com\"\n      }}><img alt=\"PRs Welcome\" src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/snappmarket/frontend-toolbox/tree/master/packages/useDidUpdateEffect/blob/master/LICENSE.md\"\n      }}><img alt=\"MIT License\" src=\"https://img.shields.io/npm/l/@snappmarket/use-did-update-effect.svg?style=flat-square\" /></a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/snappmarket/frontend-toolbox/watchers\"\n      }}><img alt=\"Watch on GitHub\" src=\"https://img.shields.io/github/watchers/snappmarket/frontend-toolbox.svg?style=social\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/snappmarket/frontend-toolbox/stargazers\"\n      }}><img alt=\"Star on GitHub\" src=\"https://img.shields.io/github/stars/snappmarket/frontend-toolbox.svg?style=social\" /></a></p>\n    <h2 {...{\n      \"id\": \"get-started\"\n    }}>{`get started`}</h2>\n    <p>{`We provide two way of using this package `}<inlineCode parentName=\"p\">{`single`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`multi`}</inlineCode>{` :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm i @snappmarket/use-did-update-effect\nOR\nnpm i @snappmarket/hooks\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import useDidUpdateEffect from '@snappmarket/use-did-update-effect';\n// or \n// import { useDidUpdateEffect } from '@snappmarket/hooks';\n\n\nconst MyComponenet = props => {\n  /**\n   * Do not run on render\n   */\n  useDidUpdateEffect(() => {\n    // I will run only when my dependencies update\n  }, [deps]);\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"source-code\"\n    }}>{`source code`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { useRef, useEffect } from 'react';\n\n/**\n * Calls function on component update or inputs change phase\n * @param fn\n * @param inputs\n */\nexport default (fn, inputs) => {\n  const didMountRef = useRef(false);\n\n  useEffect(() => {\n    if (didMountRef.current) fn();\n    else didMountRef.current = true;\n  }, inputs);\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}